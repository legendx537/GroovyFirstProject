Learning the Groovy Basic :-

First Thing :-
Here we have created a Groovy Script :-
and executed the same.

=======================================================================

Data Types in groovy :-

1. def :-

In Groovy, the def keyword is used to declare a variable without explicitly specifying its data type.
When you use def, Groovy infers the data type of the variable based on the value assigned to it.
This feature is known as "type inference" and allows for dynamic typing in Groovy.

Here's an example of using def in Groovy:

def message = "Hello, world!" // Infers the data type as String
def count = 10 // Infers the data type as int
def pi = 3.14 // Infers the data type as double

// Assigning a new value of a different type
message = 42 // Now, the data type is inferred as int

// Using the inferred types
println(message)
println(count)
println(pi)

In the above code, the def keyword is used to declare the variables message, count, and pi.
The data types of these variables are inferred based on the values assigned to them.
Initially, message is inferred as String, count as int, and pi as double.
However, when a new value of a different type is assigned to message, its data type is inferred as int instead.

Using def provides flexibility in writing code without explicitly stating the data types.
It allows you to focus more on the logic of your program rather than worrying about the specific types.
However, keep in mind that dynamic typing can also introduce potential runtime errors if variable types are not handled correctly.

It's important to note that while def allows for dynamic typing, you can still choose to explicitly declare variables with specific data types if needed.

==========================================================================================================================================================

String :-

string with double quote("") are special string in which we can use
placeHolder and expression inside the string.

In Groovy, the String data type represents a sequence of characters.
It is commonly used to store and manipulate textual data.
Strings in Groovy are enclosed in double quotes (") or single quotes (').

Here are some examples of working with strings in Groovy:

def message = "Hello, Groovy!" // Using double quotes
def name = 'John' // Using single quotes

// String concatenation
def fullName = name + " Doe"
println(fullName) // Output: John Doe

// String interpolation
def age = 25
println("My name is $name and I am $age years old.") // Output: My name is John and I am 25 years old.

// String methods
def text = "This is a sample text."
println(text.length()) // Output: 21
println(text.toUpperCase()) // Output: THIS IS A SAMPLE TEXT.
println(text.substring(5, 10)) // Output: is a

// String comparison
def str1 = "apple"
def str2 = "Apple"
def str3 = "apple"

println(str1 == str2) // Output: false
println(str1.equalsIgnoreCase(str2)) // Output: true
println(str1 == str3) // Output: true

// String interpolation with expressions
def x = 5
def y = 10
println("The sum of $x and $y is ${x + y}.") // Output: The sum of 5 and 10 is 15.

In the above examples, you can see how strings can be declared, concatenated using the + operator, and interpolated using the $ symbol.
Groovy provides various methods for string manipulation, such as length(), toUpperCase(), and substring(), among others.
Additionally, string comparison can be performed using the == operator, and case-insensitive comparison can be done with equalsIgnoreCase().

We can write String in multiple lines with the help of :-
'''
write multi-lines comment here.
'''

Example :-
s='''
The three line declaration of string is used to
define string in multiple lines
In this way we can avoid using "backslash n" at the end of each line
and write ,multiple lines of comment easily
'''
==========================================================================================================================================================

Regular Expression :- we can validate our anything with the help of regular expression.

Example :-
emailPattern = /[a-z0-9]+@[a-z]+\.[a-z]{2,3}/
println "test@gmail.com" ==~ emailPattern

Point to note emailPattern is still a String.
As soon as we use the operator ==~ , the String becomes a pattern

==========================================================================================================================================================

Closure in Groovy :-

In Groovy, a closure is a block of code that can be assigned to a variable, passed as an argument to a method, or returned as a value from a method.
Closures are similar to anonymous functions or lambdas in other programming languages.
They provide a way to encapsulate behavior and create reusable blocks of code.

Here's an example that demonstrates the usage of closures in Groovy:

def addNumbers = { x, y ->
    x + y
}

def multiplyNumbers = { x, y ->
    x * y
}

// Calling closures
def sum = addNumbers(5, 3)
println("Sum: $sum") // Output: Sum: 8

def product = multiplyNumbers(2, 4)
println("Product: $product") // Output: Product: 8

// Passing closures as arguments
def calculate = { operation, x, y ->
    operation(x, y)
}

def result1 = calculate(addNumbers, 10, 20)
println("Result 1: $result1") // Output: Result 1: 30

def result2 = calculate(multiplyNumbers, 3, 5)
println("Result 2: $result2") // Output: Result 2: 15

// Returning closures from a method
def createIncrementer = { incrementBy ->
    { number ->
        number + incrementBy
    }
}

def incrementByTwo = createIncrementer(2)
def incrementedValue = incrementByTwo(5)
println("Incremented value: $incrementedValue") // Output: Incremented value: 7

In the above code, we define two closures: addNumbers and multiplyNumbers.
These closures take two parameters, perform the specified operations, and return the result.
We can then call these closures as regular functions.

Closures can also be passed as arguments to other functions.
In the calculate closure, we pass either addNumbers or multiplyNumbers as the operation parameter.
This allows the calculate closure to dynamically perform the specified operation on the provided numbers.

Furthermore, closures can be returned from methods.
In the createIncrementer closure, we define an inner closure that increments a given number by the specified incrementBy value.
The outer closure returns this inner closure, effectively creating a closure factory that generates closures with different increment values.
We assign the returned closure to incrementByTwo and use it to increment a number.

Closures in Groovy provide powerful capabilities for creating flexible and reusable blocks of code.
They can capture and access variables from their surrounding scope, allowing for rich and expressive behavior.

==========================================================================================================================================================

Collections in Groovy :-

// Learned List and different Operation on List

// By default list will be of ArrayList Type
l = [1,2,3]
println l
println l.class

// If we want to change the type
LinkedList l = [1,2,3]
println l
println l.class

// Groovy have overloaded operator
// To add we can use << symbol

l << 4
println l

// We can append another list to the same list

l=l+[5,6,7]
println l

// we can remove from the list
l=l-[3,5]
println l

// We can use closure with the list
l.each { println it }

// To reverse the list
l.reverseEach { println it }

// To calculate each permutation
l.eachPermutation { println it}

==========================================================================================================================================================

Collection in Groovy :-

Exploring the Set and Map in Groovy :-

// Moving On to Set
// By default it uses LinkedHashSet
s=['java','js','python'] as Set
println s
println s.class

// Moving on to Map
// By default it uses LinkedHashMap
m=[courseName:'Gradle',rating:'4',price:'10']
println m
println m.getClass()

// we can have closures on map
m.each {k,v ->
    println k
    println v
}

// To access the value in the map
println m.courseName
println m['courseName']
println m.get('courseName')

// we can add key values to the map
m.review='Its decent'
println(m.review)

==========================================================================================================================================================

Methods in Groovy :-

int product(int  x,int y) {
    return x*y
}
println product(5,10)

// we can reduce the syntax further more
// But the below is not recommended
def product1(x,y) {
    x*y
}
result = product1 10,5
println result

// We can have default values for the arguments
int product2(int  x=3,int y) {
    return x*y
}
println product2(10)

// We can pass named parameters as well

void display(Map productDetails) {
    println productDetails.name
    println productDetails.price
}
display(name:'Iphone',price:1000)
// we can even remove the brackets also
display name:'Iphone 14 pro max',price:1400

==========================================================================================================================================================



